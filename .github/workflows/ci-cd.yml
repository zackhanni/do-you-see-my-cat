name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

jobs:
  # Lint and type check
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Type check
      run: npx tsc --noEmit

  # Build and test
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright
        key: ${{ runner.os }}-browsers-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-browsers-
          
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Setup environment variables
      run: |
        echo "NEXT_PUBLIC_API_ENDPOINT=http://localhost:3000" >> $GITHUB_ENV
        echo "NODE_ENV=test" >> $GITHUB_ENV
        echo "DATABASE_URL=${{ env.DATABASE_URL }}" >> $GITHUB_ENV
        echo "NEXTAUTH_SECRET=${{ env.NEXTAUTH_SECRET }}" >> $GITHUB_ENV
        echo "NEXTAUTH_URL=${{ env.NEXTAUTH_URL }}" >> $GITHUB_ENV
        
    - name: Build the application
      run: npm run build
      
    - name: Start the application
      run: |
        npm run start &
        sleep 15  # Wait for the app to start
      env:
        PORT: 3000
        
    - name: Run Playwright tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        PLAYWRIGHT_HTML_REPORT: 1
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() && !cancelled()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30
        
    - name: Upload screenshots on failure
      uses: actions/upload-artifact@v4
      if: failure() && !cancelled()
      with:
        name: screenshots-${{ matrix.browser }}
        path: test-results/
        retention-days: 30

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate

  # Build for production
  build:
    name: Build for Production
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: .next/
        retention-days: 7

  # Deploy to staging (optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: npm run deploy:staging
      env:
        DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.STAGING_URL }}

  # Deploy to production (optional)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: npm run deploy:production
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        NEXTAUTH_URL: ${{ secrets.PRODUCTION_URL }} 